# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_data.load.ipynb (unless otherwise specified).

__all__ = ['detect_batch_to_samples', 'DetectDataLoader']

# Cell
from ..all import *

# Cell
def _zip_collate(t): return Tuple2(zip(*t))
def _zip_convert(t): raise NotImplementedError

# Cell
def detect_batch_to_samples(b, max_n=10): return L(b).zip()[:max_n]

# Cell
class DetectDataLoader(TfmdDL):
    def create_batch(self, b): return (_zip_collate, _zip_convert)[self.prebatched](b)

    def _decode_batch(self, b, max_n=9, full=True):
        f = self.after_item.decode
        f = compose(f, partial(getattr(self.dataset,'decode',noop), full = full))
        return L(detect_batch_to_samples(b, max_n=max_n)).map(f)

    def show_batch(self, b=None, max_n=9, ctxs=None, show=True, unique=False, **kwargs):
        if unique:
            old_get_idxs = self.get_idxs
            self.get_idxs = lambda: Inf.zeros
        if b is None: b = self.one_batch()
        if not show: return self._pre_show_batch(b, max_n=max_n)
        show = show_batch[type(b[0][0]), type(b[1][0])]
        pb = self._pre_show_batch(b, max_n=max_n)
        show(*pb, ctxs=ctxs, max_n=max_n, **kwargs)
        if unique: self.get_idxs = old_get_idxs